{"version":3,"file":"static/js/main.21edcc7a.js","mappings":"8JAGA,MAAMA,EAAW,IAAIC,EAAAA,SAGrBD,EAASE,OAAO,iBAAiBC,UAC/B,MAAMC,EAAWC,EAAIC,QAAQC,UAAUC,MAAMC,IAC7CC,QAAQC,IAAI,2BAA4BP,GAExC,IAEE,MAAMQ,QAAYC,EAAAA,QAAAA,SAAaC,YAAYC,EAAAA,KAAK,qBAAqBX,uDAIrE,GAFAM,QAAQC,IAAI,qBAAsBC,IAE7BA,EAAII,GAGP,OADAN,QAAQO,KAAK,kCAAkCb,MAAaQ,EAAIM,UACzD,CAAEC,SAAU,QAASC,SAAU,KAAMC,OAAQ,IAItD,MAAMC,QAAaV,EAAIW,OACvBb,QAAQC,IAAI,gBAAiBW,GAG7B,MAAMH,EAAWG,EAAKE,OAAOC,mBAAqB,cAC5CL,EAAWE,EAAKE,OAAOE,mBAAqB,KAIlD,MAAO,CACLP,WACAC,WACAC,OANaC,EAAKE,OAAOH,QAAU,GAQvC,CAAE,MAAOM,GAGP,OADAjB,QAAQiB,MAAM,sCAAsCvB,KAAauB,GAC1D,CAAER,SAAU,QAASC,SAAU,KAAMC,OAAQ,GACtD,KAIqBrB,EAAS4B,gB","sources":["index.js"],"sourcesContent":["import { Resolver } from '@forge/bridge';\nimport api, { route } from '@forge/api';\n\nconst resolver = new Resolver();\n\n// Define the resolver to fetch goal data from Jira\nresolver.define('fetchGoalData', async (req) => {\n  const issueKey = req.context.extension.issue.key; // Retrieve the issue key from the request context\n  console.log('Fetching data for issue:', issueKey);  // Log the issue key for debugging\n\n  try {\n    // Make an API call to Jira to fetch custom goal-related fields (goal name, progress, and labels)\n    const res = await api.asUser().requestJira(route`/rest/api/3/issue/${issueKey}?fields=customfield_12345,customfield_67890,labels`);\n    \n    console.log('Jira API Response:', res);  // Log the response from the Jira API\n\n    if (!res.ok) {\n      // If the API response is not successful, log the issue and return a default response\n      console.warn(`Failed to fetch data for issue ${issueKey}: ${res.status}`);\n      return { goalName: 'Error', progress: '0%', labels: [] };  // Return a default error object\n    }\n\n    // Parse the response to JSON\n    const data = await res.json();\n    console.log('Fetched Data:', data);  // Log the data for debugging purposes\n\n    // Extract the goal-related fields from the API response (custom fields and labels)\n    const goalName = data.fields.customfield_12345 || 'No Goal Set';  // Fallback if goal name is missing\n    const progress = data.fields.customfield_67890 || '0%';  // Fallback if progress is missing\n    const labels = data.fields.labels || [];  // Fallback if labels are missing\n\n    // Return the goal data, including labels and progress\n    return {\n      goalName,\n      progress,\n      labels,\n    };\n  } catch (error) {\n    // Catch any unexpected errors during the API request\n    console.error(`Error fetching goal data for issue ${issueKey}:`, error);\n    return { goalName: 'Error', progress: '0%', labels: [] };  // Return a default error response in case of failure\n  }\n});\n\n// Export the resolver definitions, which will be used by Forge for the panel behavior\nexport const handler = resolver.getDefinitions();\n"],"names":["resolver","Resolver","define","async","issueKey","req","context","extension","issue","key","console","log","res","api","requestJira","route","ok","warn","status","goalName","progress","labels","data","json","fields","customfield_12345","customfield_67890","error","getDefinitions"],"sourceRoot":""}